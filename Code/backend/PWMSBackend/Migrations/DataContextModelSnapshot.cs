// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PWMSBackend.Data;

#nullable disable

namespace PWMSBackend.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PWMSBackend.Models.ApprovedItemPurchaseOrder", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PoId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ItemId", "PoId");

                    b.HasIndex("PoId");

                    b.ToTable("ApprovedItemPurchaseOrders");
                });

            modelBuilder.Entity("PWMSBackend.Models.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PWMSBackend.Models.Committee", b =>
                {
                    b.Property<string>("CommitteeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommitteeId");

                    b.ToTable("Committees");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Committee");
                });

            modelBuilder.Entity("PWMSBackend.Models.CommitteeMemberCommittee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeeId", "CommitteeId");

                    b.HasIndex("CommitteeId");

                    b.ToTable("CommitteeMemberCommittees");
                });

            modelBuilder.Entity("PWMSBackend.Models.Division", b =>
                {
                    b.Property<string>("DivisionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DivisionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DivisionId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("PWMSBackend.Models.FinalizedMasterProcurementPlan", b =>
                {
                    b.Property<string>("FmppId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("GrandTotal")
                        .HasColumnType("float");

                    b.Property<string>("MppId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FmppId");

                    b.HasIndex("MppId")
                        .IsUnique();

                    b.ToTable("FinalizedMasterProcurementPlans");
                });

            modelBuilder.Entity("PWMSBackend.Models.GRN", b =>
                {
                    b.Property<string>("GrnId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Checkedby")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("GrnId");

                    b.ToTable("GRNs");
                });

            modelBuilder.Entity("PWMSBackend.Models.GRNItemTobeShipped", b =>
                {
                    b.Property<string>("GrnId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GRNComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Received_Qty")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GrnId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("GRNItemsToBeShipped");
                });

            modelBuilder.Entity("PWMSBackend.Models.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrnId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.HasKey("InvoiceId");

                    b.HasIndex("GrnId")
                        .IsUnique();

                    b.ToTable("Invoices");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Invoice");
                });

            modelBuilder.Entity("PWMSBackend.Models.Item", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("PWMSBackend.Models.MasterProcurementPlan", b =>
                {
                    b.Property<string>("MppId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BidOpeningCommitteeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstimatedGrandTotal")
                        .HasColumnType("int");

                    b.Property<string>("ProcurementCommitteeCommitteeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TecCommitteeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MppId");

                    b.HasIndex("BidOpeningCommitteeId")
                        .IsUnique();

                    b.HasIndex("ProcurementCommitteeCommitteeId");

                    b.HasIndex("TecCommitteeId")
                        .IsUnique();

                    b.ToTable("MasterProcurementPlans");
                });

            modelBuilder.Entity("PWMSBackend.Models.MasterProcurementPlanStatus", b =>
                {
                    b.Property<string>("MppId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("MppId", "StatusId");

                    b.HasIndex("StatusId");

                    b.ToTable("MasterProcurementPlanStatuses");
                });

            modelBuilder.Entity("PWMSBackend.Models.PaymentVoucher", b =>
                {
                    b.Property<string>("PvId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Evidence")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("InvoiceTobePayId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PvId");

                    b.HasIndex("InvoiceTobePayId")
                        .IsUnique();

                    b.ToTable("PaymentVouchers");
                });

            modelBuilder.Entity("PWMSBackend.Models.ProcurementEmployee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DivisionId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DivisionId1");

                    b.ToTable("ProcurementEmployees");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ProcurementEmployee");
                });

            modelBuilder.Entity("PWMSBackend.Models.PurchaseOrder", b =>
                {
                    b.Property<string>("PoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Agreement")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("BankGuarantee")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Bond")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("CommentsForSpecialInstruction")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("LetterOfAcceptance")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ProcumentOfficerStatus")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PoId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("PWMSBackend.Models.PurchaseOrder_ItemTobeShipped", b =>
                {
                    b.Property<string>("PoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Shipped_Qty")
                        .HasColumnType("int");

                    b.HasKey("PoId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("PurchaseOrder_ItemTobeShippeds");
                });

            modelBuilder.Entity("PWMSBackend.Models.Status", b =>
                {
                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("PWMSBackend.Models.SubProcurementApprovedItems", b =>
                {
                    b.Property<string>("SppId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AuctionClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AuctionOpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PreBidMeetingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SppId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("SubProcurementApprovedItems");
                });

            modelBuilder.Entity("PWMSBackend.Models.SubProcurementPlan", b =>
                {
                    b.Property<string>("SppId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("EstimatedTotal")
                        .HasColumnType("float");

                    b.Property<string>("FinalizedMasterProcuementPlanFmppId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HODEmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MasterProcurementPlanMppId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SppId");

                    b.HasIndex("FinalizedMasterProcuementPlanFmppId");

                    b.HasIndex("HODEmployeeId");

                    b.HasIndex("MasterProcurementPlanMppId");

                    b.ToTable("SubProcurementPlans");
                });

            modelBuilder.Entity("PWMSBackend.Models.SubProcurementPlanItem", b =>
                {
                    b.Property<string>("SppId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DGComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DGStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EstimatedBudget")
                        .HasColumnType("float");

                    b.Property<byte[]>("EvidenceOfAuthorization")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternalAuditorComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalAuditorStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcurementCommitteeComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcuremnetCommitteeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RecommendedVendor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectedVendor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedVendor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TecCommitteeComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TecCommitteeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SppId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("SubProcurementPlanItems");
                });

            modelBuilder.Entity("PWMSBackend.Models.UserNotification", b =>
                {
                    b.Property<int>("notificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("notificationId"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isRead")
                        .HasColumnType("bit");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("timeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("notificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("PWMSBackend.Models.Users", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PWMSBackend.Models.Vendor", b =>
                {
                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("BusinessRegistrationDoc")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("InsuaranceCertificate")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("OtherDocs")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salutation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("TaxIdentificationDoc")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("PWMSBackend.Models.VendorhasItem", b =>
                {
                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VendorId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("VendorhasItems");
                });

            modelBuilder.Entity("PWMSBackend.Models.VendorPlaceBidItem", b =>
                {
                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BidStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("BidValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ProofDocument")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("VendorId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("VendorPlaceBidItems");
                });

            modelBuilder.Entity("PWMSBackend.Models.ApprovedItem", b =>
                {
                    b.HasBaseType("PWMSBackend.Models.Item");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FinalizedMasterProcurementPlanFmppId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FinalizedMasterProcurementPlanFmppId");

                    b.HasDiscriminator().HasValue("ApprovedItem");
                });

            modelBuilder.Entity("PWMSBackend.Models.BidOpeningCommittee", b =>
                {
                    b.HasBaseType("PWMSBackend.Models.Committee");

                    b.HasDiscriminator().HasValue("BidOpeningCommittee");
                });

            modelBuilder.Entity("PWMSBackend.Models.CommitteeMember", b =>
                {
                    b.HasBaseType("PWMSBackend.Models.ProcurementEmployee");

                    b.HasDiscriminator().HasValue("CommitteeMember");
                });

            modelBuilder.Entity("PWMSBackend.Models.CoOperativeCommittee", b =>
                {
                    b.HasBaseType("PWMSBackend.Models.Committee");

                    b.HasDiscriminator().HasValue("CoOperativeCommittee");
                });

            modelBuilder.Entity("PWMSBackend.Models.DirectorGeneral", b =>
                {
                    b.HasBaseType("PWMSBackend.Models.ProcurementEmployee");

                    b.HasDiscriminator().HasValue("DirectorGeneral");
                });

            modelBuilder.Entity("PWMSBackend.Models.HOD", b =>
                {
                    b.HasBaseType("PWMSBackend.Models.ProcurementEmployee");

                    b.Property<string>("DivisionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("DivisionId")
                        .IsUnique()
                        .HasFilter("[DivisionId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("HOD");
                });

            modelBuilder.Entity("PWMSBackend.Models.InternalAuditor", b =>
                {
                    b.HasBaseType("PWMSBackend.Models.ProcurementEmployee");

                    b.HasDiscriminator().HasValue("InternalAuditor");
                });

            modelBuilder.Entity("PWMSBackend.Models.InvoiceTobePay", b =>
                {
                    b.HasBaseType("PWMSBackend.Models.Invoice");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("InvoiceTobePay");
                });

            modelBuilder.Entity("PWMSBackend.Models.ItemInStock", b =>
                {
                    b.HasBaseType("PWMSBackend.Models.Item");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ItemInStock_CategoryId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasIndex("CategoryId");

                    b.HasDiscriminator().HasValue("ItemInStock");
                });

            modelBuilder.Entity("PWMSBackend.Models.ItemTobeShipped", b =>
                {
                    b.HasBaseType("PWMSBackend.Models.Item");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ItemTobeShipped_CategoryId");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("CategoryId");

                    b.HasDiscriminator().HasValue("ItemTobeShipped");
                });

            modelBuilder.Entity("PWMSBackend.Models.ProcurementCommittee", b =>
                {
                    b.HasBaseType("PWMSBackend.Models.Committee");

                    b.HasDiscriminator().HasValue("ProcurementCommittee");
                });

            modelBuilder.Entity("PWMSBackend.Models.TecCommittee", b =>
                {
                    b.HasBaseType("PWMSBackend.Models.Committee");

                    b.HasDiscriminator().HasValue("TecCommittee");
                });

            modelBuilder.Entity("PWMSBackend.Models.ApprovedItemPurchaseOrder", b =>
                {
                    b.HasOne("PWMSBackend.Models.ApprovedItem", "ApprovedItem")
                        .WithMany("ApprovedItemPurchaseOrders")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PWMSBackend.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("ApprovedItemPurchaseOrders")
                        .HasForeignKey("PoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedItem");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("PWMSBackend.Models.CommitteeMemberCommittee", b =>
                {
                    b.HasOne("PWMSBackend.Models.Committee", "Committee")
                        .WithMany("CommitteeMembersCommittees")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PWMSBackend.Models.CommitteeMember", "CommitteeMember")
                        .WithMany("CommitteeMembersCommittees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Committee");

                    b.Navigation("CommitteeMember");
                });

            modelBuilder.Entity("PWMSBackend.Models.FinalizedMasterProcurementPlan", b =>
                {
                    b.HasOne("PWMSBackend.Models.MasterProcurementPlan", "MasterProcurementPlan")
                        .WithOne("FinalizedMasterProcuementPlan")
                        .HasForeignKey("PWMSBackend.Models.FinalizedMasterProcurementPlan", "MppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterProcurementPlan");
                });

            modelBuilder.Entity("PWMSBackend.Models.GRNItemTobeShipped", b =>
                {
                    b.HasOne("PWMSBackend.Models.GRN", "GRN")
                        .WithMany("GRNItemTobeShippeds")
                        .HasForeignKey("GrnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PWMSBackend.Models.ItemTobeShipped", "ItemTobeShipped")
                        .WithMany("GRNItemTobeShippeds")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GRN");

                    b.Navigation("ItemTobeShipped");
                });

            modelBuilder.Entity("PWMSBackend.Models.Invoice", b =>
                {
                    b.HasOne("PWMSBackend.Models.GRN", "GRN")
                        .WithOne("Invoice")
                        .HasForeignKey("PWMSBackend.Models.Invoice", "GrnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GRN");
                });

            modelBuilder.Entity("PWMSBackend.Models.MasterProcurementPlan", b =>
                {
                    b.HasOne("PWMSBackend.Models.BidOpeningCommittee", "BidOpeningCommittee")
                        .WithOne("MasterProcurementPlan")
                        .HasForeignKey("PWMSBackend.Models.MasterProcurementPlan", "BidOpeningCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PWMSBackend.Models.ProcurementCommittee", "ProcurementCommittee")
                        .WithMany("MasterProcurementPlans")
                        .HasForeignKey("ProcurementCommitteeCommitteeId");

                    b.HasOne("PWMSBackend.Models.TecCommittee", "TecCommittee")
                        .WithOne("MasterProcurementPlan")
                        .HasForeignKey("PWMSBackend.Models.MasterProcurementPlan", "TecCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BidOpeningCommittee");

                    b.Navigation("ProcurementCommittee");

                    b.Navigation("TecCommittee");
                });

            modelBuilder.Entity("PWMSBackend.Models.MasterProcurementPlanStatus", b =>
                {
                    b.HasOne("PWMSBackend.Models.MasterProcurementPlan", "MasterProcurementPlan")
                        .WithMany("MasterProcurementPlanStatuses")
                        .HasForeignKey("MppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PWMSBackend.Models.Status", "Status")
                        .WithMany("MasterProcurementPlanStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterProcurementPlan");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("PWMSBackend.Models.PaymentVoucher", b =>
                {
                    b.HasOne("PWMSBackend.Models.InvoiceTobePay", "InvoiceTobePay")
                        .WithOne("PaymentVoucher")
                        .HasForeignKey("PWMSBackend.Models.PaymentVoucher", "InvoiceTobePayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceTobePay");
                });

            modelBuilder.Entity("PWMSBackend.Models.ProcurementEmployee", b =>
                {
                    b.HasOne("PWMSBackend.Models.Division", "Division")
                        .WithMany("ProcurementEmployees")
                        .HasForeignKey("DivisionId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("PWMSBackend.Models.PurchaseOrder", b =>
                {
                    b.HasOne("PWMSBackend.Models.Vendor", "Vendor")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("VendorId");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PWMSBackend.Models.PurchaseOrder_ItemTobeShipped", b =>
                {
                    b.HasOne("PWMSBackend.Models.ItemTobeShipped", "ItemTobeShipped")
                        .WithMany("PurchaseOrder_ItemTobeShippeds")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PWMSBackend.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("purchaseOrder_ItemTobeShippeds")
                        .HasForeignKey("PoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemTobeShipped");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("PWMSBackend.Models.SubProcurementApprovedItems", b =>
                {
                    b.HasOne("PWMSBackend.Models.ApprovedItem", "ApprovedItem")
                        .WithMany("SubProcurementApprovedItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PWMSBackend.Models.SubProcurementPlan", "SubProcurementPlan")
                        .WithMany("SubProcurementApprovedItems")
                        .HasForeignKey("SppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedItem");

                    b.Navigation("SubProcurementPlan");
                });

            modelBuilder.Entity("PWMSBackend.Models.SubProcurementPlan", b =>
                {
                    b.HasOne("PWMSBackend.Models.FinalizedMasterProcurementPlan", "FinalizedMasterProcuementPlan")
                        .WithMany()
                        .HasForeignKey("FinalizedMasterProcuementPlanFmppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PWMSBackend.Models.HOD", "HOD")
                        .WithMany("SubProcurementPlans")
                        .HasForeignKey("HODEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PWMSBackend.Models.MasterProcurementPlan", "MasterProcurementPlan")
                        .WithMany("SubProcurementPlans")
                        .HasForeignKey("MasterProcurementPlanMppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinalizedMasterProcuementPlan");

                    b.Navigation("HOD");

                    b.Navigation("MasterProcurementPlan");
                });

            modelBuilder.Entity("PWMSBackend.Models.SubProcurementPlanItem", b =>
                {
                    b.HasOne("PWMSBackend.Models.Item", "Item")
                        .WithMany("subProcurementPlanItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PWMSBackend.Models.SubProcurementPlan", "SubProcurementPlan")
                        .WithMany("subProcurementPlanItems")
                        .HasForeignKey("SppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SubProcurementPlan");
                });

            modelBuilder.Entity("PWMSBackend.Models.UserNotification", b =>
                {
                    b.HasOne("PWMSBackend.Models.Users", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PWMSBackend.Models.VendorhasItem", b =>
                {
                    b.HasOne("PWMSBackend.Models.Item", "Item")
                        .WithMany("VendorhasItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PWMSBackend.Models.Vendor", "Vendor")
                        .WithMany("VendorhasItems")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PWMSBackend.Models.VendorPlaceBidItem", b =>
                {
                    b.HasOne("PWMSBackend.Models.ApprovedItem", "ApprovedItem")
                        .WithMany("VendorPlaceBidItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PWMSBackend.Models.Vendor", "Vendor")
                        .WithMany("VendorPlaceBidItems")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedItem");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("PWMSBackend.Models.ApprovedItem", b =>
                {
                    b.HasOne("PWMSBackend.Models.Category", "Category")
                        .WithMany("ApprovedItems")
                        .HasForeignKey("CategoryId");

                    b.HasOne("PWMSBackend.Models.FinalizedMasterProcurementPlan", "FinalizedMasterProcurementPlan")
                        .WithMany("ApprovedItems")
                        .HasForeignKey("FinalizedMasterProcurementPlanFmppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("FinalizedMasterProcurementPlan");
                });

            modelBuilder.Entity("PWMSBackend.Models.HOD", b =>
                {
                    b.HasOne("PWMSBackend.Models.Division", null)
                        .WithOne("HOD")
                        .HasForeignKey("PWMSBackend.Models.HOD", "DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PWMSBackend.Models.ItemInStock", b =>
                {
                    b.HasOne("PWMSBackend.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PWMSBackend.Models.ItemTobeShipped", b =>
                {
                    b.HasOne("PWMSBackend.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PWMSBackend.Models.Category", b =>
                {
                    b.Navigation("ApprovedItems");
                });

            modelBuilder.Entity("PWMSBackend.Models.Committee", b =>
                {
                    b.Navigation("CommitteeMembersCommittees");
                });

            modelBuilder.Entity("PWMSBackend.Models.Division", b =>
                {
                    b.Navigation("HOD")
                        .IsRequired();

                    b.Navigation("ProcurementEmployees");
                });

            modelBuilder.Entity("PWMSBackend.Models.FinalizedMasterProcurementPlan", b =>
                {
                    b.Navigation("ApprovedItems");
                });

            modelBuilder.Entity("PWMSBackend.Models.GRN", b =>
                {
                    b.Navigation("GRNItemTobeShippeds");

                    b.Navigation("Invoice")
                        .IsRequired();
                });

            modelBuilder.Entity("PWMSBackend.Models.Item", b =>
                {
                    b.Navigation("VendorhasItems");

                    b.Navigation("subProcurementPlanItems");
                });

            modelBuilder.Entity("PWMSBackend.Models.MasterProcurementPlan", b =>
                {
                    b.Navigation("FinalizedMasterProcuementPlan")
                        .IsRequired();

                    b.Navigation("MasterProcurementPlanStatuses");

                    b.Navigation("SubProcurementPlans");
                });

            modelBuilder.Entity("PWMSBackend.Models.PurchaseOrder", b =>
                {
                    b.Navigation("ApprovedItemPurchaseOrders");

                    b.Navigation("purchaseOrder_ItemTobeShippeds");
                });

            modelBuilder.Entity("PWMSBackend.Models.Status", b =>
                {
                    b.Navigation("MasterProcurementPlanStatuses");
                });

            modelBuilder.Entity("PWMSBackend.Models.SubProcurementPlan", b =>
                {
                    b.Navigation("SubProcurementApprovedItems");

                    b.Navigation("subProcurementPlanItems");
                });

            modelBuilder.Entity("PWMSBackend.Models.Users", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("PWMSBackend.Models.Vendor", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("VendorPlaceBidItems");

                    b.Navigation("VendorhasItems");
                });

            modelBuilder.Entity("PWMSBackend.Models.ApprovedItem", b =>
                {
                    b.Navigation("ApprovedItemPurchaseOrders");

                    b.Navigation("SubProcurementApprovedItems");

                    b.Navigation("VendorPlaceBidItems");
                });

            modelBuilder.Entity("PWMSBackend.Models.BidOpeningCommittee", b =>
                {
                    b.Navigation("MasterProcurementPlan")
                        .IsRequired();
                });

            modelBuilder.Entity("PWMSBackend.Models.CommitteeMember", b =>
                {
                    b.Navigation("CommitteeMembersCommittees");
                });

            modelBuilder.Entity("PWMSBackend.Models.HOD", b =>
                {
                    b.Navigation("SubProcurementPlans");
                });

            modelBuilder.Entity("PWMSBackend.Models.InvoiceTobePay", b =>
                {
                    b.Navigation("PaymentVoucher")
                        .IsRequired();
                });

            modelBuilder.Entity("PWMSBackend.Models.ItemTobeShipped", b =>
                {
                    b.Navigation("GRNItemTobeShippeds");

                    b.Navigation("PurchaseOrder_ItemTobeShippeds");
                });

            modelBuilder.Entity("PWMSBackend.Models.ProcurementCommittee", b =>
                {
                    b.Navigation("MasterProcurementPlans");
                });

            modelBuilder.Entity("PWMSBackend.Models.TecCommittee", b =>
                {
                    b.Navigation("MasterProcurementPlan")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
